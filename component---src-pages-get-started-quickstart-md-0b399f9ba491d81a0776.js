(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{966:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return s}));n(11),n(6),n(5),n(3),n(7),n(4),n(8),n(1);var r=n(78),a=n(959);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/Get_started/Quickstart.md"}});var l={_frontmatter:i},c=a.a;function s(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(r.b)(c,o({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"This quickstart section will teach you how to set up a new FHIR Server from scratch using the NuGet packages with MongoDB as your storage media."),Object(r.b)("p",null,"This tutorial assumes a local installation of MongoDB exists. Set up ",Object(r.b)("a",o({parentName:"p"},{href:"https://docs.mongodb.com/manual/administration/install-community/"}),"MongoDB Community edition")," if you do not already have a local installation."),Object(r.b)("p",null,"Sample code for this tutorial is located here: ",Object(r.b)("a",o({parentName:"p"},{href:"https://github.com/kennethmyhra/spark-example"}),"spark-example")),Object(r.b)("h2",{id:"setting-up-the-aspnet-core-application"},"Setting up the ASP.NET core application"),Object(r.b)("p",null,"First create an empty ASP.NET Core project, targeting .NET Core 2.1:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"dotnet new web --framework netcoreapp2.1\n")),Object(r.b)("p",null,"Add the core package:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"dotnet add package Spark.Engine.R4\n")),Object(r.b)("p",null,"Add the MongoDB store:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"dotnet add package Spark.Mongo.R4\n")),Object(r.b)("p",null,"For testing purposes restore one of the examples database."),Object(r.b)("p",null,"Windows:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"mongorestore /host:localhost /db:spark-test /archive:.\\dockers\\mongo-spark-r4\\r4.archive.gz /gzip\n")),Object(r.b)("p",null,"Linux/Mac OS X: "),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),"mongorestore --host:localhost --db:spark-test --archive:./dockers/mongo-spark-r4/r4.archive.gz --gzip\n")),Object(r.b)("h2",{id:"configuration-and-infrastrucuture"},"Configuration and infrastrucuture"),Object(r.b)("p",null,"For the sake of simplicity in this tutorial all configuration is set up in code."),Object(r.b)("p",null,"In Startup.cs add the following code:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),'public void ConfigureServices(IServiceCollection services)\n{\n    // Sets up DI context and adds neccessary infrastructure, like ASP.NET MVC\n    services.AddFhir(new SparkSettings\n    {\n        // Base url for your FHIR API\n        Endpoint = new System.Uri("https://localhost:5001")\n    }).SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n\n    // Adds support for MongoDB Store\n    services.AddMongoFhirStore(new StoreSettings\n    {\n        // Connection string for your MongoDB Store\n        ConnectionString = "mongodb://localhost/spark-r4"\n    });\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    // Sets up internal middleware, as well as ASP.NET MVC\n    app.UseFhir(r => r.MapRoute(name: "default", template: "{controller}/{type}/{id?}", defaults: new { controller = "Home", action = "Index" }));\n}\n')),Object(r.b)("h2",{id:"defining-the-api-endpoint"},"Defining the API endpoint"),Object(r.b)("p",null,"Add a new folder called Controllers to the root of your application, then add to that folder a new controller FhirController.cs."),Object(r.b)("p",null,"In FhirController.cs add the following code:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),"[ApiController]\npublic class FhirController : ControllerBase\n{\n    // Interface which adds and retrieve resources.\n    private readonly IFhirService _fhirService;\n    // Settings for your server\n    private readonly SparkSettings _settings;\n\n    public FhirController(IFhirService fhirService, SparkSettings settings)\n    {\n        _fhirService = fhirService ?? throw new ArgumentNullException(nameof(fhirService));\n        _settings = settings ?? throw new ArgumentNullException(nameof(settings));\n    }\n}\n")),Object(r.b)("h3",{id:"read-interaction"},"Read interaction"),Object(r.b)("p",null,"Add the read interaction to your FHIR server by adding the following method to FhirController.cs"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),'[HttpGet("{type}/{id}")]\npublic ActionResult<FhirResponse> Read(string type, string id)\n{\n    ConditionalHeaderParameters parameters = new ConditionalHeaderParameters(Request);\n    Key key = Key.Create(type, id);\n    return new ActionResult<FhirResponse>(_fhirService.Read(key, parameters));\n}\n')),Object(r.b)("p",null,"If you restored the example database you should now be able to retrieve your first FHIR resource:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'curl -H "Accept: application/fhir+json; charset=utf-8" http://localhost:5000/Patient/example\n')),Object(r.b)("h3",{id:"search-interaction"},"Search interaction"),Object(r.b)("p",null,"Add the search interaction to your FHIR Server by adding the following method to FhirController.cs:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),'[HttpGet("{type}")]\npublic FhirResponse Search(string type)\n{\n    int start = FhirParameterParser.ParseIntParameter(Request.GetParameter(FhirParameter.SNAPSHOT_INDEX)) ?? 0;\n    var searchparams = Request.GetSearchParams();\n\n    return _fhirService.Search(type, searchparams, start);\n}\n')),Object(r.b)("p",null,"Try out the search interaction by running the following command:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'curl -H "Accept: application/fhir+json; charset=utf-8" http://localhost:5000/Observation?subject=example\n')),Object(r.b)("h3",{id:"create-interaction"},"Create interaction"),Object(r.b)("p",null,"Add the create interaction to your FHIR server by adding the following method to FhirController.cs:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),'[HttpPost("{type}")]\npublic FhirResponse Create(string type, Resource resource)\n{\n    Key key = Key.Create(type, resource?.Id);\n\n    if (Request.Headers.ContainsKey(FhirHttpHeaders.IfNoneExist))\n    {\n        NameValueCollection searchQueryString = HttpUtility.ParseQueryString(Request.GetTypedHeaders().IfNoneExist());\n        IEnumerable<Tuple<string, string>> searchValues =\n            searchQueryString.Keys.Cast<string>()\n                .Select(k => new Tuple<string, string>(k, searchQueryString[k]));\n\n        return _fhirService.ConditionalCreate(key, resource, SearchParams.FromUriParamList(searchValues));\n    }\n\n    return _fhirService.Create(key, resource);\n}\n')),Object(r.b)("p",null,"Try out the create interaction by running the following command:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'curl -d \'{"resourceType":"Patient","active":true,"name":[{"use":"official","family":"Doe","given":["John"]}],"gender":"male"}\' -H "Content-Type: application/fhir+json" -X POST http://localhost:5000/Patient\n')),Object(r.b)("h3",{id:"update-interaction"},"Update interaction"),Object(r.b)("p",null,"Add the update interaction to your FHIR server by adding the following method to FhirController.cs:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),'[HttpPut("{type}/{id?}")]\npublic ActionResult<FhirResponse> Update(string type, Resource resource, string id = null)\n{\n    string versionId = Request.GetTypedHeaders().IfMatch?.FirstOrDefault()?.Tag.Buffer;\n    Key key = Key.Create(type, id, versionId);\n    if(key.HasResourceId())\n    {\n        Request.TransferResourceIdIfRawBinary(resource, id);\n\n        return new ActionResult<FhirResponse>(_fhirService.Update(key, resource));\n    }\n    else\n    {\n        return new ActionResult<FhirResponse>(_fhirService.ConditionalUpdate(key, resource,\n            SearchParams.FromUriParamList(Request.TupledParameters())));\n    }\n}\n')),Object(r.b)("p",null,"Using the id from the create example try out the update interaction by running the following command:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'curl -d \'{"resourceType":"Patient","id":"6","active":true,"name":[{"use":"official","family":"Doe","given":["Jane"]}],"gender":"female"}\' -H "Content-Type: application/fhir+json" -X PUT http://localhost:5000/Patient/6\n')),Object(r.b)("h3",{id:"delete-interaction"},"Delete interaction"),Object(r.b)("p",null,"Add the delete interaction to your FHIR server by adding the following method to FhirController.cs:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-csharp"}),'[HttpDelete("{type}/{id}")]\npublic FhirResponse Delete(string type, string id)\n{\n    Key key = Key.Create(type, id);\n    FhirResponse response = _fhirService.Delete(key);\n    return response;\n}\n')),Object(r.b)("p",null,"Using the id from the create and update examples try out the delete interaction by running the following command:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-shell"}),'curl -H "Accept: application/fhir+json" -X DELETE http://localhost:5000/Patient/6\n')))}s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/Get_started/Quickstart.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-get-started-quickstart-md-0b399f9ba491d81a0776.js.map