{"version":3,"sources":["webpack:///./src/pages/Get_started/Quickstart.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,oLAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,yKACA,6FAA4E,mBAAGC,WAAW,KAAQ,CAC9F,KAAQ,sEADgE,6BAA5E,qDAGA,uEAAsD,mBAAGA,WAAW,KAAQ,CACxE,KAAQ,kDAD0C,kBAGtD,iBAAQ,CACN,GAAM,0CADR,2CAGA,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,+CAIL,8CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yCAIL,+CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,wCAIL,mFACA,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2GAIL,yCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,4GAIL,iBAAQ,CACN,GAAM,qCADR,qCAGA,yGACA,8DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,i8BA8BL,iBAAQ,CACN,GAAM,6BADR,6BAGA,yJACA,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8gBAiBL,iBAAQ,CACN,GAAM,oBADR,oBAGA,yHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,kTAUL,0HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mGAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,4HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2SAWL,yFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,+GAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,4HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,wrBAoBL,yFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,sNAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,4HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yoBAoBL,8HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,kOAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,4HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8MAUL,0IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yF,2KAQTJ,EAAWK,gBAAiB","file":"component---src-pages-get-started-quickstart-md-57d37bd0a6d6f8d4d1e2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/spark/spark/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`This quickstart section will teach you how to set up a new FHIR Server from scratch using the NuGet packages with MongoDB as your storage media.`}</p>\n    <p>{`This tutorial assumes a local installation of MongoDB exists. Set up `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.mongodb.com/manual/administration/install-community/\"\n      }}>{`MongoDB Community edition`}</a>{` if you do not already have a local installation.`}</p>\n    <p>{`Sample code for this tutorial is located here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kennethmyhra/spark-example\"\n      }}>{`spark-example`}</a></p>\n    <h2 {...{\n      \"id\": \"setting-up-the-aspnet-core-application\"\n    }}>{`Setting up the ASP.NET core application`}</h2>\n    <p>{`First create an empty ASP.NET Core project, targeting .NET Core 2.1:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet new web --framework netcoreapp2.1\n`}</code></pre>\n    <p>{`Add the core package:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet add package Spark.Engine.R4\n`}</code></pre>\n    <p>{`Add the MongoDB store:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet add package Spark.Mongo.R4\n`}</code></pre>\n    <p>{`For testing purposes restore one of the examples database.`}</p>\n    <p>{`Windows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mongorestore /host:localhost /db:spark-test /archive:.\\\\dockers\\\\mongo-spark-r4\\\\r4.archive.gz /gzip\n`}</code></pre>\n    <p>{`Linux/Mac OS X: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mongorestore --host:localhost --db:spark-test --archive:./dockers/mongo-spark-r4/r4.archive.gz --gzip\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configuration-and-infrastrucuture\"\n    }}>{`Configuration and infrastrucuture`}</h2>\n    <p>{`For the sake of simplicity in this tutorial all configuration is set up in code.`}</p>\n    <p>{`In Startup.cs add the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`public void ConfigureServices(IServiceCollection services)\n{\n    // Sets up DI context and adds neccessary infrastructure, like ASP.NET MVC\n    services.AddFhir(new SparkSettings\n    {\n        // Base url for your FHIR API\n        Endpoint = new System.Uri(\"https://localhost:5001\")\n    }).SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n\n    // Adds support for MongoDB Store\n    services.AddMongoFhirStore(new StoreSettings\n    {\n        // Connection string for your MongoDB Store\n        ConnectionString = \"mongodb://localhost/spark-r4\"\n    });\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    // Sets up internal middleware, as well as ASP.NET MVC\n    app.UseFhir(r => r.MapRoute(name: \"default\", template: \"{controller}/{type}/{id?}\", defaults: new { controller = \"Home\", action = \"Index\" }));\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defining-the-api-endpoint\"\n    }}>{`Defining the API endpoint`}</h2>\n    <p>{`Add a new folder called Controllers to the root of your application, then add to that folder a new controller FhirController.cs.`}</p>\n    <p>{`In FhirController.cs add the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`[ApiController]\npublic class FhirController : ControllerBase\n{\n    // Interface which adds and retrieve resources.\n    private readonly IFhirService _fhirService;\n    // Settings for your server\n    private readonly SparkSettings _settings;\n\n    public FhirController(IFhirService fhirService, SparkSettings settings)\n    {\n        _fhirService = fhirService ?? throw new ArgumentNullException(nameof(fhirService));\n        _settings = settings ?? throw new ArgumentNullException(nameof(settings));\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"read-interaction\"\n    }}>{`Read interaction`}</h3>\n    <p>{`Add the read interaction to your FHIR server by adding the following method to FhirController.cs`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`[HttpGet(\"{type}/{id}\")]\npublic ActionResult<FhirResponse> Read(string type, string id)\n{\n    ConditionalHeaderParameters parameters = new ConditionalHeaderParameters(Request);\n    Key key = Key.Create(type, id);\n    return new ActionResult<FhirResponse>(_fhirService.Read(key, parameters));\n}\n`}</code></pre>\n    <p>{`If you restored the example database you should now be able to retrieve your first FHIR resource:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -H \"Accept: application/fhir+json; charset=utf-8\" http://localhost:5000/Patient/example\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"search-interaction\"\n    }}>{`Search interaction`}</h3>\n    <p>{`Add the search interaction to your FHIR Server by adding the following method to FhirController.cs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`[HttpGet(\"{type}\")]\npublic FhirResponse Search(string type)\n{\n    int start = FhirParameterParser.ParseIntParameter(Request.GetParameter(FhirParameter.SNAPSHOT_INDEX)) ?? 0;\n    var searchparams = Request.GetSearchParams();\n\n    return _fhirService.Search(type, searchparams, start);\n}\n`}</code></pre>\n    <p>{`Try out the search interaction by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -H \"Accept: application/fhir+json; charset=utf-8\" http://localhost:5000/Observation?subject=example\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-interaction\"\n    }}>{`Create interaction`}</h3>\n    <p>{`Add the create interaction to your FHIR server by adding the following method to FhirController.cs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`[HttpPost(\"{type}\")]\npublic FhirResponse Create(string type, Resource resource)\n{\n    Key key = Key.Create(type, resource?.Id);\n\n    if (Request.Headers.ContainsKey(FhirHttpHeaders.IfNoneExist))\n    {\n        NameValueCollection searchQueryString = HttpUtility.ParseQueryString(Request.GetTypedHeaders().IfNoneExist());\n        IEnumerable<Tuple<string, string>> searchValues =\n            searchQueryString.Keys.Cast<string>()\n                .Select(k => new Tuple<string, string>(k, searchQueryString[k]));\n\n        return _fhirService.ConditionalCreate(key, resource, SearchParams.FromUriParamList(searchValues));\n    }\n\n    return _fhirService.Create(key, resource);\n}\n`}</code></pre>\n    <p>{`Try out the create interaction by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -d '{\"resourceType\":\"Patient\",\"active\":true,\"name\":[{\"use\":\"official\",\"family\":\"Doe\",\"given\":[\"John\"]}],\"gender\":\"male\"}' -H \"Content-Type: application/fhir+json\" -X POST http://localhost:5000/Patient\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-interaction\"\n    }}>{`Update interaction`}</h3>\n    <p>{`Add the update interaction to your FHIR server by adding the following method to FhirController.cs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`[HttpPut(\"{type}/{id?}\")]\npublic ActionResult<FhirResponse> Update(string type, Resource resource, string id = null)\n{\n    string versionId = Request.GetTypedHeaders().IfMatch?.FirstOrDefault()?.Tag.Buffer;\n    Key key = Key.Create(type, id, versionId);\n    if(key.HasResourceId())\n    {\n        Request.TransferResourceIdIfRawBinary(resource, id);\n\n        return new ActionResult<FhirResponse>(_fhirService.Update(key, resource));\n    }\n    else\n    {\n        return new ActionResult<FhirResponse>(_fhirService.ConditionalUpdate(key, resource,\n            SearchParams.FromUriParamList(Request.TupledParameters())));\n    }\n}\n`}</code></pre>\n    <p>{`Using the id from the create example try out the update interaction by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -d '{\"resourceType\":\"Patient\",\"id\":\"6\",\"active\":true,\"name\":[{\"use\":\"official\",\"family\":\"Doe\",\"given\":[\"Jane\"]}],\"gender\":\"female\"}' -H \"Content-Type: application/fhir+json\" -X PUT http://localhost:5000/Patient/6\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-interaction\"\n    }}>{`Delete interaction`}</h3>\n    <p>{`Add the delete interaction to your FHIR server by adding the following method to FhirController.cs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clike\"\n      }}>{`[HttpDelete(\"{type}/{id}\")]\npublic FhirResponse Delete(string type, string id)\n{\n    Key key = Key.Create(type, id);\n    FhirResponse response = _fhirService.Delete(key);\n    return response;\n}\n`}</code></pre>\n    <p>{`Using the id from the create and update examples try out the delete interaction by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -H \"Accept: application/fhir+json\" -X DELETE http://localhost:5000/Patient/6\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}